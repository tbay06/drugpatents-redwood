// This file was generated by RedwoodJS
import '@redwoodjs/router'
import { A } from 'ts-toolbelt'



type RouteParams<Route> = Route extends `${string}/${infer Rest}`
  ? A.Compute<ParsedParams<Rest>>
  : {}

type QueryParams = Record<string | number, string | number | boolean>

declare module '@redwoodjs/router' {
  interface AvailableRoutes {
    // Only "<Route />" components with a "name" and "path" prop will be populated here.
    home: (params?: RouteParams<"/"> & QueryParams) => "/"
    savedPatents: (params?: RouteParams<"/saved-patents"> & QueryParams) => "/saved-patents"
    drugPatents: (params?: RouteParams<"/drug-patents"> & QueryParams) => "/drug-patents"
    newSavedDrug: (params?: RouteParams<"/saved-drugs/new"> & QueryParams) => "/saved-drugs/new"
    editSavedDrug: (params?: RouteParams<"/saved-drugs/{id:Int}/edit"> & QueryParams) => "/saved-drugs/{id:Int}/edit"
    savedDrug: (params?: RouteParams<"/saved-drugs/{id:Int}"> & QueryParams) => "/saved-drugs/{id:Int}"
    savedDrugs: (params?: RouteParams<"/saved-drugs"> & QueryParams) => "/saved-drugs"
    newPatent: (params?: RouteParams<"/patents/new"> & QueryParams) => "/patents/new"
    editPatent: (params?: RouteParams<"/patents/{id:Int}/edit"> & QueryParams) => "/patents/{id:Int}/edit"
    patent: (params?: RouteParams<"/patents/{id:Int}"> & QueryParams) => "/patents/{id:Int}"
    patents: (params?: RouteParams<"/patents"> & QueryParams) => "/patents"
    newDrug: (params?: RouteParams<"/drugs/new"> & QueryParams) => "/drugs/new"
    editDrug: (params?: RouteParams<"/drugs/{id}/edit"> & QueryParams) => "/drugs/{id}/edit"
    drug: (params?: RouteParams<"/drugs/{id}"> & QueryParams) => "/drugs/{id}"
    drugs: (params?: RouteParams<"/drugs"> & QueryParams) => "/drugs"
  }
}

type ParamType<constraint> = constraint extends 'Int'
  ? number
  : constraint extends 'Boolean'
  ? boolean
  : constraint extends 'Float'
  ? number
  : string

// Path string parser for Redwood Routes
type ParsedParams<PartialRoute> =
  // {a:Int}/[...moar]
  PartialRoute extends `{${infer Param}:${infer Constraint}}/${infer Rest}`
    ? // check for greedy match e.g. {b}/{c:Int}
      // Param = b}/{c, Rest2 = {c, Constrait = Int so we reconstruct the old one {c + : + Int + }
      Param extends `${infer Param2}}/${infer Rest2}`
      ? { [ParamName in Param2]: string } &
          ParsedParams<`${Rest2}:${Constraint}}`> &
          ParsedParams<`${Rest}`>
      : { [Entry in Param]: ParamType<Constraint> } & ParsedParams<`${Rest}`>
    : // has type, but at the end e.g.{d:Int}
    PartialRoute extends `{${infer Param}:${infer Constraint}}`
    ? // Greedy match order 2
      Param extends `${infer Param2}}/${infer Rest2}`
      ? { [ParamName in Param2]: string } &
          ParsedParams<`${Rest2}:${Constraint}}`>
      : { [Entry in Param]: ParamType<Constraint> }
    : // no type, but has stuff ater it {c}/{d}
    PartialRoute extends `{${infer Param}}/${infer Rest}`
    ? { [ParamName in Param]: string } & ParsedParams<`${Rest}`>
    : // last one with no type e.g. {d}
    PartialRoute extends `{${infer Param}}`
    ? { [ParamName in Param]: string }
    : // if theres a non param
    PartialRoute extends `${string}/${infer Rest}`
    ? ParsedParams<`${Rest}`>
    : {}
